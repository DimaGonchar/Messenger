// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Client.proto

#include "Client.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr ProtoClient::ProtoClient(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : login_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pass_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , usermessage_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , request_(0)
{}
struct ProtoClientDefaultTypeInternal {
  constexpr ProtoClientDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProtoClientDefaultTypeInternal() {}
  union {
    ProtoClient _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProtoClientDefaultTypeInternal _ProtoClient_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Client_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Client_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Client_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Client_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ProtoClient, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoClient, login_),
  PROTOBUF_FIELD_OFFSET(::ProtoClient, pass_),
  PROTOBUF_FIELD_OFFSET(::ProtoClient, username_),
  PROTOBUF_FIELD_OFFSET(::ProtoClient, usermessage_),
  PROTOBUF_FIELD_OFFSET(::ProtoClient, request_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::ProtoClient)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoClient_default_instance_),
};

const char descriptor_table_protodef_Client_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Client.proto\"\365\001\n\013ProtoClient\022\r\n\005login\030"
  "\001 \001(\t\022\014\n\004pass\030\002 \001(\t\022\020\n\010userName\030\003 \001(\t\022\023\n"
  "\013userMessage\030\004 \001(\t\022*\n\007request\030\005 \001(\0162\024.Pr"
  "otoClient.RequestH\000\210\001\001\"j\n\007Request\022\021\n\rUNK"
  "NOWN_ERROR\020\000\022\021\n\rREGISTER_USER\020\001\022\022\n\016AUTHO"
  "RIZE_USER\020\002\022\023\n\017LOG_OUT_ACCOUNT\020\003\022\020\n\014SEND"
  "_MESSAGE\020\004B\n\n\010_requestb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Client_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Client_2eproto = {
  false, false, 270, descriptor_table_protodef_Client_2eproto, "Client.proto", 
  &descriptor_table_Client_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_Client_2eproto::offsets,
  file_level_metadata_Client_2eproto, file_level_enum_descriptors_Client_2eproto, file_level_service_descriptors_Client_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Client_2eproto_getter() {
  return &descriptor_table_Client_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Client_2eproto(&descriptor_table_Client_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoClient_Request_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Client_2eproto);
  return file_level_enum_descriptors_Client_2eproto[0];
}
bool ProtoClient_Request_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ProtoClient_Request ProtoClient::UNKNOWN_ERROR;
constexpr ProtoClient_Request ProtoClient::REGISTER_USER;
constexpr ProtoClient_Request ProtoClient::AUTHORIZE_USER;
constexpr ProtoClient_Request ProtoClient::LOG_OUT_ACCOUNT;
constexpr ProtoClient_Request ProtoClient::SEND_MESSAGE;
constexpr ProtoClient_Request ProtoClient::Request_MIN;
constexpr ProtoClient_Request ProtoClient::Request_MAX;
constexpr int ProtoClient::Request_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class ProtoClient::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoClient>()._has_bits_);
  static void set_has_request(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProtoClient::ProtoClient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ProtoClient)
}
ProtoClient::ProtoClient(const ProtoClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  login_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_login().empty()) {
    login_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_login(), 
      GetArenaForAllocation());
  }
  pass_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pass().empty()) {
    pass_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pass(), 
      GetArenaForAllocation());
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  usermessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_usermessage().empty()) {
    usermessage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_usermessage(), 
      GetArenaForAllocation());
  }
  request_ = from.request_;
  // @@protoc_insertion_point(copy_constructor:ProtoClient)
}

void ProtoClient::SharedCtor() {
login_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pass_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
usermessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
request_ = 0;
}

ProtoClient::~ProtoClient() {
  // @@protoc_insertion_point(destructor:ProtoClient)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProtoClient::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  login_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pass_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usermessage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProtoClient::ArenaDtor(void* object) {
  ProtoClient* _this = reinterpret_cast< ProtoClient* >(object);
  (void)_this;
}
void ProtoClient::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProtoClient::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  login_.ClearToEmpty();
  pass_.ClearToEmpty();
  username_.ClearToEmpty();
  usermessage_.ClearToEmpty();
  request_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoClient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string login = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_login();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProtoClient.login"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pass = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pass();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProtoClient.pass"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProtoClient.userName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userMessage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_usermessage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProtoClient.userMessage"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProtoClient.Request request = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_request(static_cast<::ProtoClient_Request>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoClient::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string login = 1;
  if (!this->_internal_login().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_login().data(), static_cast<int>(this->_internal_login().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProtoClient.login");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_login(), target);
  }

  // string pass = 2;
  if (!this->_internal_pass().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pass().data(), static_cast<int>(this->_internal_pass().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProtoClient.pass");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pass(), target);
  }

  // string userName = 3;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProtoClient.userName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_username(), target);
  }

  // string userMessage = 4;
  if (!this->_internal_usermessage().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_usermessage().data(), static_cast<int>(this->_internal_usermessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProtoClient.userMessage");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_usermessage(), target);
  }

  // optional .ProtoClient.Request request = 5;
  if (_internal_has_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_request(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoClient)
  return target;
}

size_t ProtoClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoClient)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string login = 1;
  if (!this->_internal_login().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_login());
  }

  // string pass = 2;
  if (!this->_internal_pass().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pass());
  }

  // string userName = 3;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string userMessage = 4;
  if (!this->_internal_usermessage().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_usermessage());
  }

  // optional .ProtoClient.Request request = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_request());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtoClient::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProtoClient::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtoClient::GetClassData() const { return &_class_data_; }

void ProtoClient::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ProtoClient *>(to)->MergeFrom(
      static_cast<const ProtoClient &>(from));
}


void ProtoClient::MergeFrom(const ProtoClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoClient)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_login().empty()) {
    _internal_set_login(from._internal_login());
  }
  if (!from._internal_pass().empty()) {
    _internal_set_pass(from._internal_pass());
  }
  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  if (!from._internal_usermessage().empty()) {
    _internal_set_usermessage(from._internal_usermessage());
  }
  if (from._internal_has_request()) {
    _internal_set_request(from._internal_request());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtoClient::CopyFrom(const ProtoClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoClient::IsInitialized() const {
  return true;
}

void ProtoClient::InternalSwap(ProtoClient* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &login_, GetArenaForAllocation(),
      &other->login_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pass_, GetArenaForAllocation(),
      &other->pass_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, GetArenaForAllocation(),
      &other->username_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &usermessage_, GetArenaForAllocation(),
      &other->usermessage_, other->GetArenaForAllocation()
  );
  swap(request_, other->request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoClient::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Client_2eproto_getter, &descriptor_table_Client_2eproto_once,
      file_level_metadata_Client_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ProtoClient* Arena::CreateMaybeMessage< ::ProtoClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoClient >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
