// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Client.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Client_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Client_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Client_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Client_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Client_2eproto;
class ProtoClient;
struct ProtoClientDefaultTypeInternal;
extern ProtoClientDefaultTypeInternal _ProtoClient_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ProtoClient* Arena::CreateMaybeMessage<::ProtoClient>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ProtoClient_Request : int {
  ProtoClient_Request_UNKNOWN_ERROR = 0,
  ProtoClient_Request_REGISTER_USER = 1,
  ProtoClient_Request_AUTHORIZE_USER = 2,
  ProtoClient_Request_LOG_OUT_ACCOUNT = 3,
  ProtoClient_Request_SEND_MESSAGE = 4,
  ProtoClient_Request_ProtoClient_Request_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ProtoClient_Request_ProtoClient_Request_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ProtoClient_Request_IsValid(int value);
constexpr ProtoClient_Request ProtoClient_Request_Request_MIN = ProtoClient_Request_UNKNOWN_ERROR;
constexpr ProtoClient_Request ProtoClient_Request_Request_MAX = ProtoClient_Request_SEND_MESSAGE;
constexpr int ProtoClient_Request_Request_ARRAYSIZE = ProtoClient_Request_Request_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoClient_Request_descriptor();
template<typename T>
inline const std::string& ProtoClient_Request_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProtoClient_Request>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProtoClient_Request_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProtoClient_Request_descriptor(), enum_t_value);
}
inline bool ProtoClient_Request_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProtoClient_Request* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProtoClient_Request>(
    ProtoClient_Request_descriptor(), name, value);
}
// ===================================================================

class ProtoClient final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoClient) */ {
 public:
  inline ProtoClient() : ProtoClient(nullptr) {}
  ~ProtoClient() override;
  explicit constexpr ProtoClient(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtoClient(const ProtoClient& from);
  ProtoClient(ProtoClient&& from) noexcept
    : ProtoClient() {
    *this = ::std::move(from);
  }

  inline ProtoClient& operator=(const ProtoClient& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoClient& operator=(ProtoClient&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtoClient& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtoClient* internal_default_instance() {
    return reinterpret_cast<const ProtoClient*>(
               &_ProtoClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProtoClient& a, ProtoClient& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoClient* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoClient* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoClient* New() const final {
    return new ProtoClient();
  }

  ProtoClient* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoClient>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtoClient& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProtoClient& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoClient* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoClient";
  }
  protected:
  explicit ProtoClient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProtoClient_Request Request;
  static constexpr Request UNKNOWN_ERROR =
    ProtoClient_Request_UNKNOWN_ERROR;
  static constexpr Request REGISTER_USER =
    ProtoClient_Request_REGISTER_USER;
  static constexpr Request AUTHORIZE_USER =
    ProtoClient_Request_AUTHORIZE_USER;
  static constexpr Request LOG_OUT_ACCOUNT =
    ProtoClient_Request_LOG_OUT_ACCOUNT;
  static constexpr Request SEND_MESSAGE =
    ProtoClient_Request_SEND_MESSAGE;
  static inline bool Request_IsValid(int value) {
    return ProtoClient_Request_IsValid(value);
  }
  static constexpr Request Request_MIN =
    ProtoClient_Request_Request_MIN;
  static constexpr Request Request_MAX =
    ProtoClient_Request_Request_MAX;
  static constexpr int Request_ARRAYSIZE =
    ProtoClient_Request_Request_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Request_descriptor() {
    return ProtoClient_Request_descriptor();
  }
  template<typename T>
  static inline const std::string& Request_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Request>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Request_Name.");
    return ProtoClient_Request_Name(enum_t_value);
  }
  static inline bool Request_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Request* value) {
    return ProtoClient_Request_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 1,
    kPassFieldNumber = 2,
    kUserNameFieldNumber = 3,
    kUserMessageFieldNumber = 4,
    kRequestFieldNumber = 5,
  };
  // string login = 1;
  void clear_login();
  const std::string& login() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_login(ArgT0&& arg0, ArgT... args);
  std::string* mutable_login();
  PROTOBUF_MUST_USE_RESULT std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // string pass = 2;
  void clear_pass();
  const std::string& pass() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pass(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pass();
  PROTOBUF_MUST_USE_RESULT std::string* release_pass();
  void set_allocated_pass(std::string* pass);
  private:
  const std::string& _internal_pass() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pass(const std::string& value);
  std::string* _internal_mutable_pass();
  public:

  // string userName = 3;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_MUST_USE_RESULT std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string userMessage = 4;
  void clear_usermessage();
  const std::string& usermessage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usermessage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usermessage();
  PROTOBUF_MUST_USE_RESULT std::string* release_usermessage();
  void set_allocated_usermessage(std::string* usermessage);
  private:
  const std::string& _internal_usermessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usermessage(const std::string& value);
  std::string* _internal_mutable_usermessage();
  public:

  // optional .ProtoClient.Request request = 5;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  ::ProtoClient_Request request() const;
  void set_request(::ProtoClient_Request value);
  private:
  ::ProtoClient_Request _internal_request() const;
  void _internal_set_request(::ProtoClient_Request value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoClient)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pass_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usermessage_;
  int request_;
  friend struct ::TableStruct_Client_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProtoClient

// string login = 1;
inline void ProtoClient::clear_login() {
  login_.ClearToEmpty();
}
inline const std::string& ProtoClient::login() const {
  // @@protoc_insertion_point(field_get:ProtoClient.login)
  return _internal_login();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtoClient::set_login(ArgT0&& arg0, ArgT... args) {
 
 login_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoClient.login)
}
inline std::string* ProtoClient::mutable_login() {
  std::string* _s = _internal_mutable_login();
  // @@protoc_insertion_point(field_mutable:ProtoClient.login)
  return _s;
}
inline const std::string& ProtoClient::_internal_login() const {
  return login_.Get();
}
inline void ProtoClient::_internal_set_login(const std::string& value) {
  
  login_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProtoClient::_internal_mutable_login() {
  
  return login_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProtoClient::release_login() {
  // @@protoc_insertion_point(field_release:ProtoClient.login)
  return login_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProtoClient::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  login_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ProtoClient.login)
}

// string pass = 2;
inline void ProtoClient::clear_pass() {
  pass_.ClearToEmpty();
}
inline const std::string& ProtoClient::pass() const {
  // @@protoc_insertion_point(field_get:ProtoClient.pass)
  return _internal_pass();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtoClient::set_pass(ArgT0&& arg0, ArgT... args) {
 
 pass_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoClient.pass)
}
inline std::string* ProtoClient::mutable_pass() {
  std::string* _s = _internal_mutable_pass();
  // @@protoc_insertion_point(field_mutable:ProtoClient.pass)
  return _s;
}
inline const std::string& ProtoClient::_internal_pass() const {
  return pass_.Get();
}
inline void ProtoClient::_internal_set_pass(const std::string& value) {
  
  pass_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProtoClient::_internal_mutable_pass() {
  
  return pass_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProtoClient::release_pass() {
  // @@protoc_insertion_point(field_release:ProtoClient.pass)
  return pass_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProtoClient::set_allocated_pass(std::string* pass) {
  if (pass != nullptr) {
    
  } else {
    
  }
  pass_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pass,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ProtoClient.pass)
}

// string userName = 3;
inline void ProtoClient::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& ProtoClient::username() const {
  // @@protoc_insertion_point(field_get:ProtoClient.userName)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtoClient::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoClient.userName)
}
inline std::string* ProtoClient::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:ProtoClient.userName)
  return _s;
}
inline const std::string& ProtoClient::_internal_username() const {
  return username_.Get();
}
inline void ProtoClient::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProtoClient::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProtoClient::release_username() {
  // @@protoc_insertion_point(field_release:ProtoClient.userName)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProtoClient::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ProtoClient.userName)
}

// string userMessage = 4;
inline void ProtoClient::clear_usermessage() {
  usermessage_.ClearToEmpty();
}
inline const std::string& ProtoClient::usermessage() const {
  // @@protoc_insertion_point(field_get:ProtoClient.userMessage)
  return _internal_usermessage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtoClient::set_usermessage(ArgT0&& arg0, ArgT... args) {
 
 usermessage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoClient.userMessage)
}
inline std::string* ProtoClient::mutable_usermessage() {
  std::string* _s = _internal_mutable_usermessage();
  // @@protoc_insertion_point(field_mutable:ProtoClient.userMessage)
  return _s;
}
inline const std::string& ProtoClient::_internal_usermessage() const {
  return usermessage_.Get();
}
inline void ProtoClient::_internal_set_usermessage(const std::string& value) {
  
  usermessage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProtoClient::_internal_mutable_usermessage() {
  
  return usermessage_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProtoClient::release_usermessage() {
  // @@protoc_insertion_point(field_release:ProtoClient.userMessage)
  return usermessage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProtoClient::set_allocated_usermessage(std::string* usermessage) {
  if (usermessage != nullptr) {
    
  } else {
    
  }
  usermessage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usermessage,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ProtoClient.userMessage)
}

// optional .ProtoClient.Request request = 5;
inline bool ProtoClient::_internal_has_request() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProtoClient::has_request() const {
  return _internal_has_request();
}
inline void ProtoClient::clear_request() {
  request_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ProtoClient_Request ProtoClient::_internal_request() const {
  return static_cast< ::ProtoClient_Request >(request_);
}
inline ::ProtoClient_Request ProtoClient::request() const {
  // @@protoc_insertion_point(field_get:ProtoClient.request)
  return _internal_request();
}
inline void ProtoClient::_internal_set_request(::ProtoClient_Request value) {
  _has_bits_[0] |= 0x00000001u;
  request_ = value;
}
inline void ProtoClient::set_request(::ProtoClient_Request value) {
  _internal_set_request(value);
  // @@protoc_insertion_point(field_set:ProtoClient.request)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ProtoClient_Request> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoClient_Request>() {
  return ::ProtoClient_Request_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Client_2eproto
