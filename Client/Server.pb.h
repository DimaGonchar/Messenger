// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Server_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Server_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Server_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Server_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Server_2eproto;
class ProtoServer;
struct ProtoServerDefaultTypeInternal;
extern ProtoServerDefaultTypeInternal _ProtoServer_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ProtoServer* Arena::CreateMaybeMessage<::ProtoServer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ProtoServer_Response : int {
  ProtoServer_Response_UNKNOWN_ERROR = 0,
  ProtoServer_Response_USER_EXISTS = 1,
  ProtoServer_Response_USER_NOT_FOUND = 2,
  ProtoServer_Response_NO_CORRECT_LOGIN = 3,
  ProtoServer_Response_NO_CORRECT_PASS = 4,
  ProtoServer_Response_REGISTRATION_IS_SUCCESFUL = 5,
  ProtoServer_Response_AUTHORIZATION_IS_SUCCESFUL = 6,
  ProtoServer_Response_USER_LOGGED_IN = 7,
  ProtoServer_Response_ProtoServer_Response_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ProtoServer_Response_ProtoServer_Response_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ProtoServer_Response_IsValid(int value);
constexpr ProtoServer_Response ProtoServer_Response_Response_MIN = ProtoServer_Response_UNKNOWN_ERROR;
constexpr ProtoServer_Response ProtoServer_Response_Response_MAX = ProtoServer_Response_USER_LOGGED_IN;
constexpr int ProtoServer_Response_Response_ARRAYSIZE = ProtoServer_Response_Response_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoServer_Response_descriptor();
template<typename T>
inline const std::string& ProtoServer_Response_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProtoServer_Response>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProtoServer_Response_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProtoServer_Response_descriptor(), enum_t_value);
}
inline bool ProtoServer_Response_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProtoServer_Response* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProtoServer_Response>(
    ProtoServer_Response_descriptor(), name, value);
}
// ===================================================================

class ProtoServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoServer) */ {
 public:
  inline ProtoServer() : ProtoServer(nullptr) {}
  ~ProtoServer() override;
  explicit constexpr ProtoServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtoServer(const ProtoServer& from);
  ProtoServer(ProtoServer&& from) noexcept
    : ProtoServer() {
    *this = ::std::move(from);
  }

  inline ProtoServer& operator=(const ProtoServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoServer& operator=(ProtoServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtoServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtoServer* internal_default_instance() {
    return reinterpret_cast<const ProtoServer*>(
               &_ProtoServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProtoServer& a, ProtoServer& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoServer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoServer* New() const final {
    return new ProtoServer();
  }

  ProtoServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtoServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProtoServer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoServer";
  }
  protected:
  explicit ProtoServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProtoServer_Response Response;
  static constexpr Response UNKNOWN_ERROR =
    ProtoServer_Response_UNKNOWN_ERROR;
  static constexpr Response USER_EXISTS =
    ProtoServer_Response_USER_EXISTS;
  static constexpr Response USER_NOT_FOUND =
    ProtoServer_Response_USER_NOT_FOUND;
  static constexpr Response NO_CORRECT_LOGIN =
    ProtoServer_Response_NO_CORRECT_LOGIN;
  static constexpr Response NO_CORRECT_PASS =
    ProtoServer_Response_NO_CORRECT_PASS;
  static constexpr Response REGISTRATION_IS_SUCCESFUL =
    ProtoServer_Response_REGISTRATION_IS_SUCCESFUL;
  static constexpr Response AUTHORIZATION_IS_SUCCESFUL =
    ProtoServer_Response_AUTHORIZATION_IS_SUCCESFUL;
  static constexpr Response USER_LOGGED_IN =
    ProtoServer_Response_USER_LOGGED_IN;
  static inline bool Response_IsValid(int value) {
    return ProtoServer_Response_IsValid(value);
  }
  static constexpr Response Response_MIN =
    ProtoServer_Response_Response_MIN;
  static constexpr Response Response_MAX =
    ProtoServer_Response_Response_MAX;
  static constexpr int Response_ARRAYSIZE =
    ProtoServer_Response_Response_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Response_descriptor() {
    return ProtoServer_Response_descriptor();
  }
  template<typename T>
  static inline const std::string& Response_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Response>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Response_Name.");
    return ProtoServer_Response_Name(enum_t_value);
  }
  static inline bool Response_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Response* value) {
    return ProtoServer_Response_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResponceFieldNumber = 1,
  };
  // optional .ProtoServer.Response responce = 1;
  bool has_responce() const;
  private:
  bool _internal_has_responce() const;
  public:
  void clear_responce();
  ::ProtoServer_Response responce() const;
  void set_responce(::ProtoServer_Response value);
  private:
  ::ProtoServer_Response _internal_responce() const;
  void _internal_set_responce(::ProtoServer_Response value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int responce_;
  friend struct ::TableStruct_Server_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProtoServer

// optional .ProtoServer.Response responce = 1;
inline bool ProtoServer::_internal_has_responce() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProtoServer::has_responce() const {
  return _internal_has_responce();
}
inline void ProtoServer::clear_responce() {
  responce_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ProtoServer_Response ProtoServer::_internal_responce() const {
  return static_cast< ::ProtoServer_Response >(responce_);
}
inline ::ProtoServer_Response ProtoServer::responce() const {
  // @@protoc_insertion_point(field_get:ProtoServer.responce)
  return _internal_responce();
}
inline void ProtoServer::_internal_set_responce(::ProtoServer_Response value) {
  _has_bits_[0] |= 0x00000001u;
  responce_ = value;
}
inline void ProtoServer::set_responce(::ProtoServer_Response value) {
  _internal_set_responce(value);
  // @@protoc_insertion_point(field_set:ProtoServer.responce)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ProtoServer_Response> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoServer_Response>() {
  return ::ProtoServer_Response_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Server_2eproto
