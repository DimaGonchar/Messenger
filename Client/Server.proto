syntax = "proto3";

   message ServerLogInNotification
   {
     uint32 typeNotification=1;
     string userLogin=2;
	 string userPass=3;
     uint64 sesionId=4;
     uint64 userId=5;

	 enum Response
	 {
     AUTHORIZATION_IS_SUCCESFUL=0;
	 AUTHORIZATION_FAILD=1;
	 USER_NOT_FOUND=2;
	 }
	  optional Response respose =6;
   }

   message ServerRegistrationNotification
   {
          uint32 typeNotification=1;
          uint64 userId=2;
		  uint64 sesionId=3;

		  enum Response
		  {
		   REGISTRATION_IS_SUCCESFUL=0;
		   USER_EXISTS=1;
		  }
		  optional Response response =4;
   }

   message ServerMessageNotification
   {
      uint32 typeNotification=1;
      string userName=2;
      uint64 senderId=3;
      string text=4;
   }

   message NewUserConnectNotification
   {      uint32 typeNotification=1;
		  string userName=2;
   }

switch (type)
{
 case NotificationType::Registration:
     qInfo()<<"regestration";
     m_regNotif.ParseFromArray(m_dataFromServer, m_dataFromServer.size());
     if(m_regNotif.response()==ServerRegistrationNotification_Response_USER_EXISTS)
     {
         qInfo()<<"user exists!";
         emit newMessage("user exists!");
     }
         qInfo()<<"succesful";
         emit newMessage("registered!");

 case NotificationType::SignIn:
      qInfo()<<"sign in";
      m_signInNotif.ParseFromArray(m_dataFromServer, m_dataFromServer.size());
      if(m_signInNotif.respose()==ServerLogInNotification_Response_USER_NOT_FOUND)
      {
          qInfo()<<"user not founded";
          emit newMessage("user not founded");
      }
      if(m_signInNotif.respose()==ServerLogInNotification_Response_AUTHORIZATION_FAILD)
      {
          qInfo()<<"no correct login or password";
          emit newMessage("no correct login or password");
      }
          qInfo()<<"succesful";
          emit logIn();
}







