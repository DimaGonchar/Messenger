// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Client.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Client_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Client_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Client_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Client_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Client_2eproto;
class ClientRegistrationNotification;
struct ClientRegistrationNotificationDefaultTypeInternal;
extern ClientRegistrationNotificationDefaultTypeInternal _ClientRegistrationNotification_default_instance_;
class ClientSendMessageNotification;
struct ClientSendMessageNotificationDefaultTypeInternal;
extern ClientSendMessageNotificationDefaultTypeInternal _ClientSendMessageNotification_default_instance_;
class ClientSignInNotification;
struct ClientSignInNotificationDefaultTypeInternal;
extern ClientSignInNotificationDefaultTypeInternal _ClientSignInNotification_default_instance_;
class LogOutNotification;
struct LogOutNotificationDefaultTypeInternal;
extern LogOutNotificationDefaultTypeInternal _LogOutNotification_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ClientRegistrationNotification* Arena::CreateMaybeMessage<::ClientRegistrationNotification>(Arena*);
template<> ::ClientSendMessageNotification* Arena::CreateMaybeMessage<::ClientSendMessageNotification>(Arena*);
template<> ::ClientSignInNotification* Arena::CreateMaybeMessage<::ClientSignInNotification>(Arena*);
template<> ::LogOutNotification* Arena::CreateMaybeMessage<::LogOutNotification>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ClientRegistrationNotification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientRegistrationNotification) */ {
 public:
  inline ClientRegistrationNotification() : ClientRegistrationNotification(nullptr) {}
  ~ClientRegistrationNotification() override;
  explicit constexpr ClientRegistrationNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientRegistrationNotification(const ClientRegistrationNotification& from);
  ClientRegistrationNotification(ClientRegistrationNotification&& from) noexcept
    : ClientRegistrationNotification() {
    *this = ::std::move(from);
  }

  inline ClientRegistrationNotification& operator=(const ClientRegistrationNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientRegistrationNotification& operator=(ClientRegistrationNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientRegistrationNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientRegistrationNotification* internal_default_instance() {
    return reinterpret_cast<const ClientRegistrationNotification*>(
               &_ClientRegistrationNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientRegistrationNotification& a, ClientRegistrationNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientRegistrationNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientRegistrationNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientRegistrationNotification* New() const final {
    return new ClientRegistrationNotification();
  }

  ClientRegistrationNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientRegistrationNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientRegistrationNotification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClientRegistrationNotification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientRegistrationNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientRegistrationNotification";
  }
  protected:
  explicit ClientRegistrationNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 2,
    kPassFieldNumber = 3,
    kUserNameFieldNumber = 4,
    kTypeNotificationFieldNumber = 1,
  };
  // string login = 2;
  void clear_login();
  const std::string& login() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_login(ArgT0&& arg0, ArgT... args);
  std::string* mutable_login();
  PROTOBUF_MUST_USE_RESULT std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // string pass = 3;
  void clear_pass();
  const std::string& pass() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pass(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pass();
  PROTOBUF_MUST_USE_RESULT std::string* release_pass();
  void set_allocated_pass(std::string* pass);
  private:
  const std::string& _internal_pass() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pass(const std::string& value);
  std::string* _internal_mutable_pass();
  public:

  // string userName = 4;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_MUST_USE_RESULT std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // uint32 typeNotification = 1;
  void clear_typenotification();
  uint32_t typenotification() const;
  void set_typenotification(uint32_t value);
  private:
  uint32_t _internal_typenotification() const;
  void _internal_set_typenotification(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ClientRegistrationNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pass_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  uint32_t typenotification_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Client_2eproto;
};
// -------------------------------------------------------------------

class ClientSignInNotification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientSignInNotification) */ {
 public:
  inline ClientSignInNotification() : ClientSignInNotification(nullptr) {}
  ~ClientSignInNotification() override;
  explicit constexpr ClientSignInNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientSignInNotification(const ClientSignInNotification& from);
  ClientSignInNotification(ClientSignInNotification&& from) noexcept
    : ClientSignInNotification() {
    *this = ::std::move(from);
  }

  inline ClientSignInNotification& operator=(const ClientSignInNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientSignInNotification& operator=(ClientSignInNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientSignInNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientSignInNotification* internal_default_instance() {
    return reinterpret_cast<const ClientSignInNotification*>(
               &_ClientSignInNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClientSignInNotification& a, ClientSignInNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientSignInNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientSignInNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientSignInNotification* New() const final {
    return new ClientSignInNotification();
  }

  ClientSignInNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientSignInNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientSignInNotification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClientSignInNotification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientSignInNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientSignInNotification";
  }
  protected:
  explicit ClientSignInNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 2,
    kPassFieldNumber = 3,
    kSesionIdFieldNumber = 4,
    kUserIdFieldNumber = 5,
    kTypeNotificationFieldNumber = 1,
  };
  // string login = 2;
  void clear_login();
  const std::string& login() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_login(ArgT0&& arg0, ArgT... args);
  std::string* mutable_login();
  PROTOBUF_MUST_USE_RESULT std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // string pass = 3;
  void clear_pass();
  const std::string& pass() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pass(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pass();
  PROTOBUF_MUST_USE_RESULT std::string* release_pass();
  void set_allocated_pass(std::string* pass);
  private:
  const std::string& _internal_pass() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pass(const std::string& value);
  std::string* _internal_mutable_pass();
  public:

  // uint64 sesionId = 4;
  void clear_sesionid();
  uint64_t sesionid() const;
  void set_sesionid(uint64_t value);
  private:
  uint64_t _internal_sesionid() const;
  void _internal_set_sesionid(uint64_t value);
  public:

  // uint64 userId = 5;
  void clear_userid();
  uint64_t userid() const;
  void set_userid(uint64_t value);
  private:
  uint64_t _internal_userid() const;
  void _internal_set_userid(uint64_t value);
  public:

  // uint32 typeNotification = 1;
  void clear_typenotification();
  uint32_t typenotification() const;
  void set_typenotification(uint32_t value);
  private:
  uint32_t _internal_typenotification() const;
  void _internal_set_typenotification(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ClientSignInNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pass_;
  uint64_t sesionid_;
  uint64_t userid_;
  uint32_t typenotification_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Client_2eproto;
};
// -------------------------------------------------------------------

class ClientSendMessageNotification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientSendMessageNotification) */ {
 public:
  inline ClientSendMessageNotification() : ClientSendMessageNotification(nullptr) {}
  ~ClientSendMessageNotification() override;
  explicit constexpr ClientSendMessageNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientSendMessageNotification(const ClientSendMessageNotification& from);
  ClientSendMessageNotification(ClientSendMessageNotification&& from) noexcept
    : ClientSendMessageNotification() {
    *this = ::std::move(from);
  }

  inline ClientSendMessageNotification& operator=(const ClientSendMessageNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientSendMessageNotification& operator=(ClientSendMessageNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientSendMessageNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientSendMessageNotification* internal_default_instance() {
    return reinterpret_cast<const ClientSendMessageNotification*>(
               &_ClientSendMessageNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClientSendMessageNotification& a, ClientSendMessageNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientSendMessageNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientSendMessageNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientSendMessageNotification* New() const final {
    return new ClientSendMessageNotification();
  }

  ClientSendMessageNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientSendMessageNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientSendMessageNotification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClientSendMessageNotification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientSendMessageNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientSendMessageNotification";
  }
  protected:
  explicit ClientSendMessageNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 4,
    kSenderIdFieldNumber = 2,
    kReceiverIdFieldNumber = 3,
    kTypeNotificationFieldNumber = 1,
  };
  // string text = 4;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_MUST_USE_RESULT std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // uint64 senderId = 2;
  void clear_senderid();
  uint64_t senderid() const;
  void set_senderid(uint64_t value);
  private:
  uint64_t _internal_senderid() const;
  void _internal_set_senderid(uint64_t value);
  public:

  // uint64 receiverId = 3;
  void clear_receiverid();
  uint64_t receiverid() const;
  void set_receiverid(uint64_t value);
  private:
  uint64_t _internal_receiverid() const;
  void _internal_set_receiverid(uint64_t value);
  public:

  // uint32 typeNotification = 1;
  void clear_typenotification();
  uint32_t typenotification() const;
  void set_typenotification(uint32_t value);
  private:
  uint32_t _internal_typenotification() const;
  void _internal_set_typenotification(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ClientSendMessageNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  uint64_t senderid_;
  uint64_t receiverid_;
  uint32_t typenotification_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Client_2eproto;
};
// -------------------------------------------------------------------

class LogOutNotification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LogOutNotification) */ {
 public:
  inline LogOutNotification() : LogOutNotification(nullptr) {}
  ~LogOutNotification() override;
  explicit constexpr LogOutNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogOutNotification(const LogOutNotification& from);
  LogOutNotification(LogOutNotification&& from) noexcept
    : LogOutNotification() {
    *this = ::std::move(from);
  }

  inline LogOutNotification& operator=(const LogOutNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogOutNotification& operator=(LogOutNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogOutNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogOutNotification* internal_default_instance() {
    return reinterpret_cast<const LogOutNotification*>(
               &_LogOutNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LogOutNotification& a, LogOutNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(LogOutNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogOutNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogOutNotification* New() const final {
    return new LogOutNotification();
  }

  LogOutNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogOutNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogOutNotification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LogOutNotification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogOutNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LogOutNotification";
  }
  protected:
  explicit LogOutNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 3,
    kSesionIdFieldNumber = 4,
    kTypeNotificationFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 id = 3;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // uint64 sesionId = 4;
  void clear_sesionid();
  uint64_t sesionid() const;
  void set_sesionid(uint64_t value);
  private:
  uint64_t _internal_sesionid() const;
  void _internal_set_sesionid(uint64_t value);
  public:

  // uint32 typeNotification = 1;
  void clear_typenotification();
  uint32_t typenotification() const;
  void set_typenotification(uint32_t value);
  private:
  uint32_t _internal_typenotification() const;
  void _internal_set_typenotification(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LogOutNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint64_t id_;
  uint64_t sesionid_;
  uint32_t typenotification_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Client_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientRegistrationNotification

// uint32 typeNotification = 1;
inline void ClientRegistrationNotification::clear_typenotification() {
  typenotification_ = 0u;
}
inline uint32_t ClientRegistrationNotification::_internal_typenotification() const {
  return typenotification_;
}
inline uint32_t ClientRegistrationNotification::typenotification() const {
  // @@protoc_insertion_point(field_get:ClientRegistrationNotification.typeNotification)
  return _internal_typenotification();
}
inline void ClientRegistrationNotification::_internal_set_typenotification(uint32_t value) {
  
  typenotification_ = value;
}
inline void ClientRegistrationNotification::set_typenotification(uint32_t value) {
  _internal_set_typenotification(value);
  // @@protoc_insertion_point(field_set:ClientRegistrationNotification.typeNotification)
}

// string login = 2;
inline void ClientRegistrationNotification::clear_login() {
  login_.ClearToEmpty();
}
inline const std::string& ClientRegistrationNotification::login() const {
  // @@protoc_insertion_point(field_get:ClientRegistrationNotification.login)
  return _internal_login();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientRegistrationNotification::set_login(ArgT0&& arg0, ArgT... args) {
 
 login_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ClientRegistrationNotification.login)
}
inline std::string* ClientRegistrationNotification::mutable_login() {
  std::string* _s = _internal_mutable_login();
  // @@protoc_insertion_point(field_mutable:ClientRegistrationNotification.login)
  return _s;
}
inline const std::string& ClientRegistrationNotification::_internal_login() const {
  return login_.Get();
}
inline void ClientRegistrationNotification::_internal_set_login(const std::string& value) {
  
  login_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ClientRegistrationNotification::_internal_mutable_login() {
  
  return login_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ClientRegistrationNotification::release_login() {
  // @@protoc_insertion_point(field_release:ClientRegistrationNotification.login)
  return login_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ClientRegistrationNotification::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  login_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (login_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ClientRegistrationNotification.login)
}

// string pass = 3;
inline void ClientRegistrationNotification::clear_pass() {
  pass_.ClearToEmpty();
}
inline const std::string& ClientRegistrationNotification::pass() const {
  // @@protoc_insertion_point(field_get:ClientRegistrationNotification.pass)
  return _internal_pass();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientRegistrationNotification::set_pass(ArgT0&& arg0, ArgT... args) {
 
 pass_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ClientRegistrationNotification.pass)
}
inline std::string* ClientRegistrationNotification::mutable_pass() {
  std::string* _s = _internal_mutable_pass();
  // @@protoc_insertion_point(field_mutable:ClientRegistrationNotification.pass)
  return _s;
}
inline const std::string& ClientRegistrationNotification::_internal_pass() const {
  return pass_.Get();
}
inline void ClientRegistrationNotification::_internal_set_pass(const std::string& value) {
  
  pass_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ClientRegistrationNotification::_internal_mutable_pass() {
  
  return pass_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ClientRegistrationNotification::release_pass() {
  // @@protoc_insertion_point(field_release:ClientRegistrationNotification.pass)
  return pass_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ClientRegistrationNotification::set_allocated_pass(std::string* pass) {
  if (pass != nullptr) {
    
  } else {
    
  }
  pass_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pass,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pass_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pass_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ClientRegistrationNotification.pass)
}

// string userName = 4;
inline void ClientRegistrationNotification::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& ClientRegistrationNotification::username() const {
  // @@protoc_insertion_point(field_get:ClientRegistrationNotification.userName)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientRegistrationNotification::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ClientRegistrationNotification.userName)
}
inline std::string* ClientRegistrationNotification::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:ClientRegistrationNotification.userName)
  return _s;
}
inline const std::string& ClientRegistrationNotification::_internal_username() const {
  return username_.Get();
}
inline void ClientRegistrationNotification::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ClientRegistrationNotification::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ClientRegistrationNotification::release_username() {
  // @@protoc_insertion_point(field_release:ClientRegistrationNotification.userName)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ClientRegistrationNotification::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ClientRegistrationNotification.userName)
}

// -------------------------------------------------------------------

// ClientSignInNotification

// uint32 typeNotification = 1;
inline void ClientSignInNotification::clear_typenotification() {
  typenotification_ = 0u;
}
inline uint32_t ClientSignInNotification::_internal_typenotification() const {
  return typenotification_;
}
inline uint32_t ClientSignInNotification::typenotification() const {
  // @@protoc_insertion_point(field_get:ClientSignInNotification.typeNotification)
  return _internal_typenotification();
}
inline void ClientSignInNotification::_internal_set_typenotification(uint32_t value) {
  
  typenotification_ = value;
}
inline void ClientSignInNotification::set_typenotification(uint32_t value) {
  _internal_set_typenotification(value);
  // @@protoc_insertion_point(field_set:ClientSignInNotification.typeNotification)
}

// string login = 2;
inline void ClientSignInNotification::clear_login() {
  login_.ClearToEmpty();
}
inline const std::string& ClientSignInNotification::login() const {
  // @@protoc_insertion_point(field_get:ClientSignInNotification.login)
  return _internal_login();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientSignInNotification::set_login(ArgT0&& arg0, ArgT... args) {
 
 login_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ClientSignInNotification.login)
}
inline std::string* ClientSignInNotification::mutable_login() {
  std::string* _s = _internal_mutable_login();
  // @@protoc_insertion_point(field_mutable:ClientSignInNotification.login)
  return _s;
}
inline const std::string& ClientSignInNotification::_internal_login() const {
  return login_.Get();
}
inline void ClientSignInNotification::_internal_set_login(const std::string& value) {
  
  login_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ClientSignInNotification::_internal_mutable_login() {
  
  return login_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ClientSignInNotification::release_login() {
  // @@protoc_insertion_point(field_release:ClientSignInNotification.login)
  return login_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ClientSignInNotification::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  login_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (login_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ClientSignInNotification.login)
}

// string pass = 3;
inline void ClientSignInNotification::clear_pass() {
  pass_.ClearToEmpty();
}
inline const std::string& ClientSignInNotification::pass() const {
  // @@protoc_insertion_point(field_get:ClientSignInNotification.pass)
  return _internal_pass();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientSignInNotification::set_pass(ArgT0&& arg0, ArgT... args) {
 
 pass_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ClientSignInNotification.pass)
}
inline std::string* ClientSignInNotification::mutable_pass() {
  std::string* _s = _internal_mutable_pass();
  // @@protoc_insertion_point(field_mutable:ClientSignInNotification.pass)
  return _s;
}
inline const std::string& ClientSignInNotification::_internal_pass() const {
  return pass_.Get();
}
inline void ClientSignInNotification::_internal_set_pass(const std::string& value) {
  
  pass_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ClientSignInNotification::_internal_mutable_pass() {
  
  return pass_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ClientSignInNotification::release_pass() {
  // @@protoc_insertion_point(field_release:ClientSignInNotification.pass)
  return pass_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ClientSignInNotification::set_allocated_pass(std::string* pass) {
  if (pass != nullptr) {
    
  } else {
    
  }
  pass_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pass,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pass_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pass_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ClientSignInNotification.pass)
}

// uint64 sesionId = 4;
inline void ClientSignInNotification::clear_sesionid() {
  sesionid_ = uint64_t{0u};
}
inline uint64_t ClientSignInNotification::_internal_sesionid() const {
  return sesionid_;
}
inline uint64_t ClientSignInNotification::sesionid() const {
  // @@protoc_insertion_point(field_get:ClientSignInNotification.sesionId)
  return _internal_sesionid();
}
inline void ClientSignInNotification::_internal_set_sesionid(uint64_t value) {
  
  sesionid_ = value;
}
inline void ClientSignInNotification::set_sesionid(uint64_t value) {
  _internal_set_sesionid(value);
  // @@protoc_insertion_point(field_set:ClientSignInNotification.sesionId)
}

// uint64 userId = 5;
inline void ClientSignInNotification::clear_userid() {
  userid_ = uint64_t{0u};
}
inline uint64_t ClientSignInNotification::_internal_userid() const {
  return userid_;
}
inline uint64_t ClientSignInNotification::userid() const {
  // @@protoc_insertion_point(field_get:ClientSignInNotification.userId)
  return _internal_userid();
}
inline void ClientSignInNotification::_internal_set_userid(uint64_t value) {
  
  userid_ = value;
}
inline void ClientSignInNotification::set_userid(uint64_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:ClientSignInNotification.userId)
}

// -------------------------------------------------------------------

// ClientSendMessageNotification

// uint32 typeNotification = 1;
inline void ClientSendMessageNotification::clear_typenotification() {
  typenotification_ = 0u;
}
inline uint32_t ClientSendMessageNotification::_internal_typenotification() const {
  return typenotification_;
}
inline uint32_t ClientSendMessageNotification::typenotification() const {
  // @@protoc_insertion_point(field_get:ClientSendMessageNotification.typeNotification)
  return _internal_typenotification();
}
inline void ClientSendMessageNotification::_internal_set_typenotification(uint32_t value) {
  
  typenotification_ = value;
}
inline void ClientSendMessageNotification::set_typenotification(uint32_t value) {
  _internal_set_typenotification(value);
  // @@protoc_insertion_point(field_set:ClientSendMessageNotification.typeNotification)
}

// uint64 senderId = 2;
inline void ClientSendMessageNotification::clear_senderid() {
  senderid_ = uint64_t{0u};
}
inline uint64_t ClientSendMessageNotification::_internal_senderid() const {
  return senderid_;
}
inline uint64_t ClientSendMessageNotification::senderid() const {
  // @@protoc_insertion_point(field_get:ClientSendMessageNotification.senderId)
  return _internal_senderid();
}
inline void ClientSendMessageNotification::_internal_set_senderid(uint64_t value) {
  
  senderid_ = value;
}
inline void ClientSendMessageNotification::set_senderid(uint64_t value) {
  _internal_set_senderid(value);
  // @@protoc_insertion_point(field_set:ClientSendMessageNotification.senderId)
}

// uint64 receiverId = 3;
inline void ClientSendMessageNotification::clear_receiverid() {
  receiverid_ = uint64_t{0u};
}
inline uint64_t ClientSendMessageNotification::_internal_receiverid() const {
  return receiverid_;
}
inline uint64_t ClientSendMessageNotification::receiverid() const {
  // @@protoc_insertion_point(field_get:ClientSendMessageNotification.receiverId)
  return _internal_receiverid();
}
inline void ClientSendMessageNotification::_internal_set_receiverid(uint64_t value) {
  
  receiverid_ = value;
}
inline void ClientSendMessageNotification::set_receiverid(uint64_t value) {
  _internal_set_receiverid(value);
  // @@protoc_insertion_point(field_set:ClientSendMessageNotification.receiverId)
}

// string text = 4;
inline void ClientSendMessageNotification::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& ClientSendMessageNotification::text() const {
  // @@protoc_insertion_point(field_get:ClientSendMessageNotification.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientSendMessageNotification::set_text(ArgT0&& arg0, ArgT... args) {
 
 text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ClientSendMessageNotification.text)
}
inline std::string* ClientSendMessageNotification::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:ClientSendMessageNotification.text)
  return _s;
}
inline const std::string& ClientSendMessageNotification::_internal_text() const {
  return text_.Get();
}
inline void ClientSendMessageNotification::_internal_set_text(const std::string& value) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ClientSendMessageNotification::_internal_mutable_text() {
  
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ClientSendMessageNotification::release_text() {
  // @@protoc_insertion_point(field_release:ClientSendMessageNotification.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ClientSendMessageNotification::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ClientSendMessageNotification.text)
}

// -------------------------------------------------------------------

// LogOutNotification

// uint32 typeNotification = 1;
inline void LogOutNotification::clear_typenotification() {
  typenotification_ = 0u;
}
inline uint32_t LogOutNotification::_internal_typenotification() const {
  return typenotification_;
}
inline uint32_t LogOutNotification::typenotification() const {
  // @@protoc_insertion_point(field_get:LogOutNotification.typeNotification)
  return _internal_typenotification();
}
inline void LogOutNotification::_internal_set_typenotification(uint32_t value) {
  
  typenotification_ = value;
}
inline void LogOutNotification::set_typenotification(uint32_t value) {
  _internal_set_typenotification(value);
  // @@protoc_insertion_point(field_set:LogOutNotification.typeNotification)
}

// string name = 2;
inline void LogOutNotification::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& LogOutNotification::name() const {
  // @@protoc_insertion_point(field_get:LogOutNotification.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogOutNotification::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LogOutNotification.name)
}
inline std::string* LogOutNotification::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:LogOutNotification.name)
  return _s;
}
inline const std::string& LogOutNotification::_internal_name() const {
  return name_.Get();
}
inline void LogOutNotification::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LogOutNotification::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LogOutNotification::release_name() {
  // @@protoc_insertion_point(field_release:LogOutNotification.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LogOutNotification::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LogOutNotification.name)
}

// uint64 id = 3;
inline void LogOutNotification::clear_id() {
  id_ = uint64_t{0u};
}
inline uint64_t LogOutNotification::_internal_id() const {
  return id_;
}
inline uint64_t LogOutNotification::id() const {
  // @@protoc_insertion_point(field_get:LogOutNotification.id)
  return _internal_id();
}
inline void LogOutNotification::_internal_set_id(uint64_t value) {
  
  id_ = value;
}
inline void LogOutNotification::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:LogOutNotification.id)
}

// uint64 sesionId = 4;
inline void LogOutNotification::clear_sesionid() {
  sesionid_ = uint64_t{0u};
}
inline uint64_t LogOutNotification::_internal_sesionid() const {
  return sesionid_;
}
inline uint64_t LogOutNotification::sesionid() const {
  // @@protoc_insertion_point(field_get:LogOutNotification.sesionId)
  return _internal_sesionid();
}
inline void LogOutNotification::_internal_set_sesionid(uint64_t value) {
  
  sesionid_ = value;
}
inline void LogOutNotification::set_sesionid(uint64_t value) {
  _internal_set_sesionid(value);
  // @@protoc_insertion_point(field_set:LogOutNotification.sesionId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Client_2eproto
