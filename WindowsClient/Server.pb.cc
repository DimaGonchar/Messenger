// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Server.proto

#include "Server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr ServerLogInNotification::ServerLogInNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : userlogin_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , userpass_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , typenotification_(0u)
  , respose_(0)

  , sesionid_(uint64_t{0u})
  , userid_(uint64_t{0u}){}
struct ServerLogInNotificationDefaultTypeInternal {
  constexpr ServerLogInNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerLogInNotificationDefaultTypeInternal() {}
  union {
    ServerLogInNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerLogInNotificationDefaultTypeInternal _ServerLogInNotification_default_instance_;
constexpr ServerRegistrationNotification::ServerRegistrationNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : userid_(uint64_t{0u})
  , typenotification_(0u)
  , response_(0)

  , sesionid_(uint64_t{0u}){}
struct ServerRegistrationNotificationDefaultTypeInternal {
  constexpr ServerRegistrationNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerRegistrationNotificationDefaultTypeInternal() {}
  union {
    ServerRegistrationNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerRegistrationNotificationDefaultTypeInternal _ServerRegistrationNotification_default_instance_;
constexpr ServerMessageNotification::ServerMessageNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , senderid_(uint64_t{0u})
  , typenotification_(0u){}
struct ServerMessageNotificationDefaultTypeInternal {
  constexpr ServerMessageNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerMessageNotificationDefaultTypeInternal() {}
  union {
    ServerMessageNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerMessageNotificationDefaultTypeInternal _ServerMessageNotification_default_instance_;
constexpr NewUserConnectNotification::NewUserConnectNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , typenotification_(0u){}
struct NewUserConnectNotificationDefaultTypeInternal {
  constexpr NewUserConnectNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NewUserConnectNotificationDefaultTypeInternal() {}
  union {
    NewUserConnectNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NewUserConnectNotificationDefaultTypeInternal _NewUserConnectNotification_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Server_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Server_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Server_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Server_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ServerLogInNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ServerLogInNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerLogInNotification, typenotification_),
  PROTOBUF_FIELD_OFFSET(::ServerLogInNotification, userlogin_),
  PROTOBUF_FIELD_OFFSET(::ServerLogInNotification, userpass_),
  PROTOBUF_FIELD_OFFSET(::ServerLogInNotification, sesionid_),
  PROTOBUF_FIELD_OFFSET(::ServerLogInNotification, userid_),
  PROTOBUF_FIELD_OFFSET(::ServerLogInNotification, respose_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::ServerRegistrationNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ServerRegistrationNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerRegistrationNotification, typenotification_),
  PROTOBUF_FIELD_OFFSET(::ServerRegistrationNotification, userid_),
  PROTOBUF_FIELD_OFFSET(::ServerRegistrationNotification, sesionid_),
  PROTOBUF_FIELD_OFFSET(::ServerRegistrationNotification, response_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMessageNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMessageNotification, typenotification_),
  PROTOBUF_FIELD_OFFSET(::ServerMessageNotification, username_),
  PROTOBUF_FIELD_OFFSET(::ServerMessageNotification, senderid_),
  PROTOBUF_FIELD_OFFSET(::ServerMessageNotification, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NewUserConnectNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NewUserConnectNotification, typenotification_),
  PROTOBUF_FIELD_OFFSET(::NewUserConnectNotification, username_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::ServerLogInNotification)},
  { 17, 26, sizeof(::ServerRegistrationNotification)},
  { 30, -1, sizeof(::ServerMessageNotification)},
  { 39, -1, sizeof(::NewUserConnectNotification)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ServerLogInNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ServerRegistrationNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ServerMessageNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NewUserConnectNotification_default_instance_),
};

const char descriptor_table_protodef_Server_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Server.proto\"\230\002\n\027ServerLogInNotificati"
  "on\022\030\n\020typeNotification\030\001 \001(\r\022\021\n\tuserLogi"
  "n\030\002 \001(\t\022\020\n\010userPass\030\003 \001(\t\022\020\n\010sesionId\030\004 "
  "\001(\004\022\016\n\006userId\030\005 \001(\004\0227\n\007respose\030\006 \001(\0162!.S"
  "erverLogInNotification.ResponseH\000\210\001\001\"W\n\010"
  "Response\022\036\n\032AUTHORIZATION_IS_SUCCESFUL\020\000"
  "\022\027\n\023AUTHORIZATION_FAILD\020\001\022\022\n\016USER_NOT_FO"
  "UND\020\002B\n\n\010_respose\"\346\001\n\036ServerRegistration"
  "Notification\022\030\n\020typeNotification\030\001 \001(\r\022\016"
  "\n\006userId\030\002 \001(\004\022\020\n\010sesionId\030\003 \001(\004\022\?\n\010resp"
  "onse\030\004 \001(\0162(.ServerRegistrationNotificat"
  "ion.ResponseH\000\210\001\001\":\n\010Response\022\035\n\031REGISTR"
  "ATION_IS_SUCCESFUL\020\000\022\017\n\013USER_EXISTS\020\001B\013\n"
  "\t_response\"g\n\031ServerMessageNotification\022"
  "\030\n\020typeNotification\030\001 \001(\r\022\020\n\010userName\030\002 "
  "\001(\t\022\020\n\010senderId\030\003 \001(\004\022\014\n\004text\030\004 \001(\t\"H\n\032N"
  "ewUserConnectNotification\022\030\n\020typeNotific"
  "ation\030\001 \001(\r\022\020\n\010userName\030\002 \001(\tb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Server_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Server_2eproto = {
  false, false, 717, descriptor_table_protodef_Server_2eproto, "Server.proto", 
  &descriptor_table_Server_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_Server_2eproto::offsets,
  file_level_metadata_Server_2eproto, file_level_enum_descriptors_Server_2eproto, file_level_service_descriptors_Server_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Server_2eproto_getter() {
  return &descriptor_table_Server_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Server_2eproto(&descriptor_table_Server_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerLogInNotification_Response_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Server_2eproto);
  return file_level_enum_descriptors_Server_2eproto[0];
}
bool ServerLogInNotification_Response_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ServerLogInNotification_Response ServerLogInNotification::AUTHORIZATION_IS_SUCCESFUL;
constexpr ServerLogInNotification_Response ServerLogInNotification::AUTHORIZATION_FAILD;
constexpr ServerLogInNotification_Response ServerLogInNotification::USER_NOT_FOUND;
constexpr ServerLogInNotification_Response ServerLogInNotification::Response_MIN;
constexpr ServerLogInNotification_Response ServerLogInNotification::Response_MAX;
constexpr int ServerLogInNotification::Response_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerRegistrationNotification_Response_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Server_2eproto);
  return file_level_enum_descriptors_Server_2eproto[1];
}
bool ServerRegistrationNotification_Response_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ServerRegistrationNotification_Response ServerRegistrationNotification::REGISTRATION_IS_SUCCESFUL;
constexpr ServerRegistrationNotification_Response ServerRegistrationNotification::USER_EXISTS;
constexpr ServerRegistrationNotification_Response ServerRegistrationNotification::Response_MIN;
constexpr ServerRegistrationNotification_Response ServerRegistrationNotification::Response_MAX;
constexpr int ServerRegistrationNotification::Response_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class ServerLogInNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerLogInNotification>()._has_bits_);
  static void set_has_respose(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ServerLogInNotification::ServerLogInNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ServerLogInNotification)
}
ServerLogInNotification::ServerLogInNotification(const ServerLogInNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  userlogin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userlogin().empty()) {
    userlogin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_userlogin(), 
      GetArenaForAllocation());
  }
  userpass_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userpass().empty()) {
    userpass_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_userpass(), 
      GetArenaForAllocation());
  }
  ::memcpy(&typenotification_, &from.typenotification_,
    static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&typenotification_)) + sizeof(userid_));
  // @@protoc_insertion_point(copy_constructor:ServerLogInNotification)
}

void ServerLogInNotification::SharedCtor() {
userlogin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
userpass_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&typenotification_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&typenotification_)) + sizeof(userid_));
}

ServerLogInNotification::~ServerLogInNotification() {
  // @@protoc_insertion_point(destructor:ServerLogInNotification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServerLogInNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  userlogin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userpass_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerLogInNotification::ArenaDtor(void* object) {
  ServerLogInNotification* _this = reinterpret_cast< ServerLogInNotification* >(object);
  (void)_this;
}
void ServerLogInNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerLogInNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerLogInNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerLogInNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userlogin_.ClearToEmpty();
  userpass_.ClearToEmpty();
  typenotification_ = 0u;
  respose_ = 0;
  ::memset(&sesionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&sesionid_)) + sizeof(userid_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerLogInNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 typeNotification = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          typenotification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userLogin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_userlogin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ServerLogInNotification.userLogin"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userPass = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_userpass();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ServerLogInNotification.userPass"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sesionId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sesionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 userId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ServerLogInNotification.Response respose = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_respose(static_cast<::ServerLogInNotification_Response>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerLogInNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerLogInNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 typeNotification = 1;
  if (this->_internal_typenotification() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_typenotification(), target);
  }

  // string userLogin = 2;
  if (!this->_internal_userlogin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userlogin().data(), static_cast<int>(this->_internal_userlogin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServerLogInNotification.userLogin");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_userlogin(), target);
  }

  // string userPass = 3;
  if (!this->_internal_userpass().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userpass().data(), static_cast<int>(this->_internal_userpass().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServerLogInNotification.userPass");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_userpass(), target);
  }

  // uint64 sesionId = 4;
  if (this->_internal_sesionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_sesionid(), target);
  }

  // uint64 userId = 5;
  if (this->_internal_userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_userid(), target);
  }

  // optional .ServerLogInNotification.Response respose = 6;
  if (_internal_has_respose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_respose(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerLogInNotification)
  return target;
}

size_t ServerLogInNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerLogInNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userLogin = 2;
  if (!this->_internal_userlogin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userlogin());
  }

  // string userPass = 3;
  if (!this->_internal_userpass().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userpass());
  }

  // uint32 typeNotification = 1;
  if (this->_internal_typenotification() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_typenotification());
  }

  // optional .ServerLogInNotification.Response respose = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_respose());
  }

  // uint64 sesionId = 4;
  if (this->_internal_sesionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sesionid());
  }

  // uint64 userId = 5;
  if (this->_internal_userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerLogInNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServerLogInNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerLogInNotification::GetClassData() const { return &_class_data_; }

void ServerLogInNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ServerLogInNotification *>(to)->MergeFrom(
      static_cast<const ServerLogInNotification &>(from));
}


void ServerLogInNotification::MergeFrom(const ServerLogInNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerLogInNotification)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_userlogin().empty()) {
    _internal_set_userlogin(from._internal_userlogin());
  }
  if (!from._internal_userpass().empty()) {
    _internal_set_userpass(from._internal_userpass());
  }
  if (from._internal_typenotification() != 0) {
    _internal_set_typenotification(from._internal_typenotification());
  }
  if (from._internal_has_respose()) {
    _internal_set_respose(from._internal_respose());
  }
  if (from._internal_sesionid() != 0) {
    _internal_set_sesionid(from._internal_sesionid());
  }
  if (from._internal_userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerLogInNotification::CopyFrom(const ServerLogInNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerLogInNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerLogInNotification::IsInitialized() const {
  return true;
}

void ServerLogInNotification::InternalSwap(ServerLogInNotification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &userlogin_, GetArenaForAllocation(),
      &other->userlogin_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &userpass_, GetArenaForAllocation(),
      &other->userpass_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerLogInNotification, userid_)
      + sizeof(ServerLogInNotification::userid_)
      - PROTOBUF_FIELD_OFFSET(ServerLogInNotification, typenotification_)>(
          reinterpret_cast<char*>(&typenotification_),
          reinterpret_cast<char*>(&other->typenotification_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerLogInNotification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Server_2eproto_getter, &descriptor_table_Server_2eproto_once,
      file_level_metadata_Server_2eproto[0]);
}

// ===================================================================

class ServerRegistrationNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerRegistrationNotification>()._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ServerRegistrationNotification::ServerRegistrationNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ServerRegistrationNotification)
}
ServerRegistrationNotification::ServerRegistrationNotification(const ServerRegistrationNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&sesionid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(sesionid_));
  // @@protoc_insertion_point(copy_constructor:ServerRegistrationNotification)
}

void ServerRegistrationNotification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&userid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sesionid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(sesionid_));
}

ServerRegistrationNotification::~ServerRegistrationNotification() {
  // @@protoc_insertion_point(destructor:ServerRegistrationNotification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServerRegistrationNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerRegistrationNotification::ArenaDtor(void* object) {
  ServerRegistrationNotification* _this = reinterpret_cast< ServerRegistrationNotification* >(object);
  (void)_this;
}
void ServerRegistrationNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerRegistrationNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerRegistrationNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRegistrationNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&typenotification_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(typenotification_));
  response_ = 0;
  sesionid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerRegistrationNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 typeNotification = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          typenotification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 userId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sesionId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sesionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ServerRegistrationNotification.Response response = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_response(static_cast<::ServerRegistrationNotification_Response>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerRegistrationNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRegistrationNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 typeNotification = 1;
  if (this->_internal_typenotification() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_typenotification(), target);
  }

  // uint64 userId = 2;
  if (this->_internal_userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_userid(), target);
  }

  // uint64 sesionId = 3;
  if (this->_internal_sesionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_sesionid(), target);
  }

  // optional .ServerRegistrationNotification.Response response = 4;
  if (_internal_has_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRegistrationNotification)
  return target;
}

size_t ServerRegistrationNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRegistrationNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 userId = 2;
  if (this->_internal_userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_userid());
  }

  // uint32 typeNotification = 1;
  if (this->_internal_typenotification() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_typenotification());
  }

  // optional .ServerRegistrationNotification.Response response = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_response());
  }

  // uint64 sesionId = 3;
  if (this->_internal_sesionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sesionid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerRegistrationNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServerRegistrationNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerRegistrationNotification::GetClassData() const { return &_class_data_; }

void ServerRegistrationNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ServerRegistrationNotification *>(to)->MergeFrom(
      static_cast<const ServerRegistrationNotification &>(from));
}


void ServerRegistrationNotification::MergeFrom(const ServerRegistrationNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerRegistrationNotification)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
  if (from._internal_typenotification() != 0) {
    _internal_set_typenotification(from._internal_typenotification());
  }
  if (from._internal_has_response()) {
    _internal_set_response(from._internal_response());
  }
  if (from._internal_sesionid() != 0) {
    _internal_set_sesionid(from._internal_sesionid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerRegistrationNotification::CopyFrom(const ServerRegistrationNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRegistrationNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerRegistrationNotification::IsInitialized() const {
  return true;
}

void ServerRegistrationNotification::InternalSwap(ServerRegistrationNotification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerRegistrationNotification, sesionid_)
      + sizeof(ServerRegistrationNotification::sesionid_)
      - PROTOBUF_FIELD_OFFSET(ServerRegistrationNotification, userid_)>(
          reinterpret_cast<char*>(&userid_),
          reinterpret_cast<char*>(&other->userid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerRegistrationNotification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Server_2eproto_getter, &descriptor_table_Server_2eproto_once,
      file_level_metadata_Server_2eproto[1]);
}

// ===================================================================

class ServerMessageNotification::_Internal {
 public:
};

ServerMessageNotification::ServerMessageNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ServerMessageNotification)
}
ServerMessageNotification::ServerMessageNotification(const ServerMessageNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArenaForAllocation());
  }
  ::memcpy(&senderid_, &from.senderid_,
    static_cast<size_t>(reinterpret_cast<char*>(&typenotification_) -
    reinterpret_cast<char*>(&senderid_)) + sizeof(typenotification_));
  // @@protoc_insertion_point(copy_constructor:ServerMessageNotification)
}

void ServerMessageNotification::SharedCtor() {
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&senderid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&typenotification_) -
    reinterpret_cast<char*>(&senderid_)) + sizeof(typenotification_));
}

ServerMessageNotification::~ServerMessageNotification() {
  // @@protoc_insertion_point(destructor:ServerMessageNotification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServerMessageNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerMessageNotification::ArenaDtor(void* object) {
  ServerMessageNotification* _this = reinterpret_cast< ServerMessageNotification* >(object);
  (void)_this;
}
void ServerMessageNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerMessageNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerMessageNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMessageNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  text_.ClearToEmpty();
  ::memset(&senderid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&typenotification_) -
      reinterpret_cast<char*>(&senderid_)) + sizeof(typenotification_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMessageNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 typeNotification = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          typenotification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ServerMessageNotification.userName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 senderId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          senderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ServerMessageNotification.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerMessageNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMessageNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 typeNotification = 1;
  if (this->_internal_typenotification() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_typenotification(), target);
  }

  // string userName = 2;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServerMessageNotification.userName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // uint64 senderId = 3;
  if (this->_internal_senderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_senderid(), target);
  }

  // string text = 4;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServerMessageNotification.text");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMessageNotification)
  return target;
}

size_t ServerMessageNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMessageNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userName = 2;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string text = 4;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // uint64 senderId = 3;
  if (this->_internal_senderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_senderid());
  }

  // uint32 typeNotification = 1;
  if (this->_internal_typenotification() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_typenotification());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMessageNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServerMessageNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMessageNotification::GetClassData() const { return &_class_data_; }

void ServerMessageNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ServerMessageNotification *>(to)->MergeFrom(
      static_cast<const ServerMessageNotification &>(from));
}


void ServerMessageNotification::MergeFrom(const ServerMessageNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMessageNotification)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  if (!from._internal_text().empty()) {
    _internal_set_text(from._internal_text());
  }
  if (from._internal_senderid() != 0) {
    _internal_set_senderid(from._internal_senderid());
  }
  if (from._internal_typenotification() != 0) {
    _internal_set_typenotification(from._internal_typenotification());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMessageNotification::CopyFrom(const ServerMessageNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMessageNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessageNotification::IsInitialized() const {
  return true;
}

void ServerMessageNotification::InternalSwap(ServerMessageNotification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, GetArenaForAllocation(),
      &other->username_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_, GetArenaForAllocation(),
      &other->text_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMessageNotification, typenotification_)
      + sizeof(ServerMessageNotification::typenotification_)
      - PROTOBUF_FIELD_OFFSET(ServerMessageNotification, senderid_)>(
          reinterpret_cast<char*>(&senderid_),
          reinterpret_cast<char*>(&other->senderid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMessageNotification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Server_2eproto_getter, &descriptor_table_Server_2eproto_once,
      file_level_metadata_Server_2eproto[2]);
}

// ===================================================================

class NewUserConnectNotification::_Internal {
 public:
};

NewUserConnectNotification::NewUserConnectNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:NewUserConnectNotification)
}
NewUserConnectNotification::NewUserConnectNotification(const NewUserConnectNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  typenotification_ = from.typenotification_;
  // @@protoc_insertion_point(copy_constructor:NewUserConnectNotification)
}

void NewUserConnectNotification::SharedCtor() {
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
typenotification_ = 0u;
}

NewUserConnectNotification::~NewUserConnectNotification() {
  // @@protoc_insertion_point(destructor:NewUserConnectNotification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NewUserConnectNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NewUserConnectNotification::ArenaDtor(void* object) {
  NewUserConnectNotification* _this = reinterpret_cast< NewUserConnectNotification* >(object);
  (void)_this;
}
void NewUserConnectNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewUserConnectNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NewUserConnectNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:NewUserConnectNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  typenotification_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewUserConnectNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 typeNotification = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          typenotification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "NewUserConnectNotification.userName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewUserConnectNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NewUserConnectNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 typeNotification = 1;
  if (this->_internal_typenotification() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_typenotification(), target);
  }

  // string userName = 2;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NewUserConnectNotification.userName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NewUserConnectNotification)
  return target;
}

size_t NewUserConnectNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NewUserConnectNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userName = 2;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // uint32 typeNotification = 1;
  if (this->_internal_typenotification() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_typenotification());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewUserConnectNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NewUserConnectNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewUserConnectNotification::GetClassData() const { return &_class_data_; }

void NewUserConnectNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NewUserConnectNotification *>(to)->MergeFrom(
      static_cast<const NewUserConnectNotification &>(from));
}


void NewUserConnectNotification::MergeFrom(const NewUserConnectNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NewUserConnectNotification)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  if (from._internal_typenotification() != 0) {
    _internal_set_typenotification(from._internal_typenotification());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewUserConnectNotification::CopyFrom(const NewUserConnectNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NewUserConnectNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewUserConnectNotification::IsInitialized() const {
  return true;
}

void NewUserConnectNotification::InternalSwap(NewUserConnectNotification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, GetArenaForAllocation(),
      &other->username_, other->GetArenaForAllocation()
  );
  swap(typenotification_, other->typenotification_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewUserConnectNotification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Server_2eproto_getter, &descriptor_table_Server_2eproto_once,
      file_level_metadata_Server_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ServerLogInNotification* Arena::CreateMaybeMessage< ::ServerLogInNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerLogInNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRegistrationNotification* Arena::CreateMaybeMessage< ::ServerRegistrationNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRegistrationNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMessageNotification* Arena::CreateMaybeMessage< ::ServerMessageNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerMessageNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::NewUserConnectNotification* Arena::CreateMaybeMessage< ::NewUserConnectNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NewUserConnectNotification >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
